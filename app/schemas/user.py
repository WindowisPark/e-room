# ai-agent/app/schemas/user.py

from typing import Optional
from pydantic import BaseModel, EmailStr
from datetime import datetime

class UserBase(BaseModel):
    email: Optional[EmailStr] = Optional
    username: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = False

class UserCreate(UserBase):
    email: EmailStr
    password: str

class UserCreateOAuth(BaseModel):
    oauth_provider: str
    oauth_id: str
    email: Optional[str] = None  # EmailStrÏóêÏÑú strÎ°ú Î≥ÄÍ≤ΩÌïòÍ≥† OptionalÎ°ú
    full_name: Optional[str] = None
    is_verified: bool = False

    class Config:
        from_attributes = True

class UserUpdate(UserBase):
    password: Optional[str] = None

class UserInDBBase(UserBase):
    id: int
    email: Optional[EmailStr] = None  # <- OptionalÎ°ú Î≥ÄÍ≤Ω
    role: str
    created_at: datetime

    class Config:
        from_attributes = True

class User(UserInDBBase):
    pass

class UserInDB(UserInDBBase):
    hashed_password: Optional[str] = None

class UserProfileUpdate(BaseModel):
    email: Optional[EmailStr] = None
    username: Optional[str] = None
    full_name: Optional[str] = None

    class Config:
        from_attributes = True

class UserResponse(BaseModel):
    """üìå ÏÇ¨Ïö©Ïûê ÏùëÎãµ Î™®Îç∏"""
    id: int
    email: Optional[str]  # emailÏù¥ nullableÌïòÎØÄÎ°ú OptionalÎ°ú Î≥ÄÍ≤Ω
    username: str
    full_name: str
    role: str
    is_active: bool
    created_at: datetime
    oauth_provider: Optional[str]
    oauth_id: Optional[str]
    is_verified: bool
    is_admin: bool  # Ïù¥ÎØ∏ User Î™®Îç∏Ïóê @propertyÎ°ú Ï†ïÏùòÎêòÏñ¥ ÏûàÏùå

    class Config:
        from_attributes = True

class ErrorResponse(BaseModel):
    """üìå Ïò§Î•ò ÏùëÎãµ Î™®Îç∏"""
    detail: str